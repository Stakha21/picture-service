{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-igw"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "InternetGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "AppSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "us-west-2a",
        "CidrBlock": "10.0.0.0/21",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-app-us-west-2a"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "AppRouteTable1": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-app-${AppSubnet1.AvailabilityZone}"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ]
      }
    },
    "AppRouteTableAssociation1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "AppRouteTable1"
        },
        "SubnetId": {
          "Ref": "AppSubnet1"
        }
      }
    },
    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "us-west-2a",
        "CidrBlock": "10.0.8.0/22",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-public-us-west-2a"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "PublicRouteTable1": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-public-${PublicSubnet1.AvailabilityZone}"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "PublicRouteTableAssociation1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable1"
        },
        "SubnetId": {
          "Ref": "PublicSubnet1"
        }
      }
    },
    "PublicRoute1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "PublicRouteTable1"
        },
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      },
      "DependsOn": [
        "InternetGatewayAttachment"
      ]
    },
    "DBSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "us-west-2a",
        "CidrBlock": "10.0.12.0/22",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-db-us-west-2a"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "DBRouteTable1": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-db-${DBSubnet1.AvailabilityZone}"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ]
      }
    },
    "DBRouteTableAssociation1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "DBRouteTable1"
        },
        "SubnetId": {
          "Ref": "DBSubnet1"
        }
      }
    },
    "AppSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "us-west-2b",
        "CidrBlock": "10.0.16.0/21",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-app-us-west-2b"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "AppRouteTable2": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-app-${AppSubnet2.AvailabilityZone}"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ]
      }
    },
    "AppRouteTableAssociation2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "AppRouteTable2"
        },
        "SubnetId": {
          "Ref": "AppSubnet2"
        }
      }
    },
    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "us-west-2b",
        "CidrBlock": "10.0.24.0/22",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-public-us-west-2b"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "PublicRouteTable2": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-public-${PublicSubnet2.AvailabilityZone}"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "PublicRouteTableAssociation2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable2"
        },
        "SubnetId": {
          "Ref": "PublicSubnet2"
        }
      }
    },
    "PublicRoute2": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "PublicRouteTable2"
        },
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      },
      "DependsOn": [
        "InternetGatewayAttachment"
      ]
    },
    "DBSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "us-west-2b",
        "CidrBlock": "10.0.28.0/22",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-db-us-west-2b"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "DBRouteTable2": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-db-${DBSubnet2.AvailabilityZone}"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ]
      }
    },
    "DBRouteTableAssociation2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "DBRouteTable2"
        },
        "SubnetId": {
          "Ref": "DBSubnet2"
        }
      }
    },
    "AppSubnet3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "us-west-2c",
        "CidrBlock": "10.0.32.0/21",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-app-us-west-2c"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "AppRouteTable3": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-app-${AppSubnet3.AvailabilityZone}"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ]
      }
    },
    "AppRouteTableAssociation3": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "AppRouteTable3"
        },
        "SubnetId": {
          "Ref": "AppSubnet3"
        }
      }
    },
    "PublicSubnet3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "us-west-2c",
        "CidrBlock": "10.0.40.0/22",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-public-us-west-2c"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "PublicRouteTable3": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-public-${PublicSubnet3.AvailabilityZone}"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "PublicRouteTableAssociation3": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable3"
        },
        "SubnetId": {
          "Ref": "PublicSubnet3"
        }
      }
    },
    "PublicRoute3": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "PublicRouteTable3"
        },
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      },
      "DependsOn": [
        "InternetGatewayAttachment"
      ]
    },
    "DBSubnet3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "us-west-2c",
        "CidrBlock": "10.0.44.0/22",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-db-us-west-2c"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "DBRouteTable3": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-db-${DBSubnet3.AvailabilityZone}"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ]
      }
    },
    "DBRouteTableAssociation3": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "DBRouteTable3"
        },
        "SubnetId": {
          "Ref": "DBSubnet3"
        }
      }
    },
    "AppSubnet4": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "us-west-2d",
        "CidrBlock": "10.0.48.0/21",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-app-us-west-2d"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "AppRouteTable4": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-app-${AppSubnet4.AvailabilityZone}"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ]
      }
    },
    "AppRouteTableAssociation4": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "AppRouteTable4"
        },
        "SubnetId": {
          "Ref": "AppSubnet4"
        }
      }
    },
    "PublicSubnet4": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "us-west-2d",
        "CidrBlock": "10.0.56.0/22",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-public-us-west-2d"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "PublicRouteTable4": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-public-${PublicSubnet4.AvailabilityZone}"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "PublicRouteTableAssociation4": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable4"
        },
        "SubnetId": {
          "Ref": "PublicSubnet4"
        }
      }
    },
    "PublicRoute4": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "PublicRouteTable4"
        },
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      },
      "DependsOn": [
        "InternetGatewayAttachment"
      ]
    },
    "DBSubnet4": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "us-west-2d",
        "CidrBlock": "10.0.60.0/22",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-db-us-west-2d"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "DBRouteTable4": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-db-${DBSubnet4.AvailabilityZone}"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ]
      }
    },
    "DBRouteTableAssociation4": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "DBRouteTable4"
        },
        "SubnetId": {
          "Ref": "DBSubnet4"
        }
      }
    },
    "DefaultSecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "IpProtocol": "-1",
        "DestinationSecurityGroupId": {
          "Fn::GetAtt": [
            "VPC",
            "DefaultSecurityGroup"
          ]
        },
        "GroupId": {
          "Fn::GetAtt": [
            "VPC",
            "DefaultSecurityGroup"
          ]
        }
      }
    },
    "AppSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Application Security Group",
        "SecurityGroupEgress": [
          {
            "Description": "permit HTTPS outbound",
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "DestinationPrefixListId": "pl-68a54001",
            "Description": "permit HTTPS to S3",
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443
          },
          {
            "DestinationPrefixListId": "pl-68a54001",
            "Description": "permit HTTP to S3",
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80
          },
          {
            "DestinationPrefixListId": "pl-00a54069",
            "Description": "permit HTTPS to DynamoDB",
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443
          }
        ],
        "SecurityGroupIngress": [
          {
            "Description": "permit HTTPS inbound",
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-sg"
            }
          }
        ]
      }
    },
    "DHCPOptions": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainName": {
          "Fn::Sub": "${AWS::Region}.compute.internal"
        },
        "DomainNameServers": [
          "AmazonProvidedDNS"
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-DHCPOptionsSet"
            }
          }
        ]
      }
    },
    "VPCDHCPOptionsAssociation": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "DhcpOptionsId": {
          "Ref": "DHCPOptions"
        }
      }
    },
    "S3VPCEndpoint": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Properties": {
        "ServiceName": {
          "Fn::Sub": "com.amazonaws.${AWS::Region}.s3"
        },
        "VpcId": {
          "Ref": "VPC"
        },
        "VpcEndpointType": "Gateway",
        "RouteTableIds": [
          {
            "Ref": "AppRouteTable1"
          },
          {
            "Ref": "AppRouteTable2"
          },
          {
            "Ref": "AppRouteTable3"
          },
          {
            "Ref": "AppRouteTable4"
          }
        ],
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": "*",
              "Resource": "*",
              "Action": "s3:*"
            }
          ]
        }
      }
    },
    "DynamodbVPCEndpoint": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Properties": {
        "ServiceName": {
          "Fn::Sub": "com.amazonaws.${AWS::Region}.dynamodb"
        },
        "VpcId": {
          "Ref": "VPC"
        },
        "VpcEndpointType": "Gateway",
        "RouteTableIds": [
          {
            "Ref": "AppRouteTable1"
          },
          {
            "Ref": "AppRouteTable2"
          },
          {
            "Ref": "AppRouteTable3"
          },
          {
            "Ref": "AppRouteTable4"
          }
        ],
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": "*",
              "Resource": "*",
              "Action": "dynamodb:*"
            }
          ]
        }
      }
    },
    "RDSSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupName": {
          "Ref": "AWS::StackName"
        },
        "DBSubnetGroupDescription": {
          "Ref": "AWS::StackName"
        },
        "SubnetIds": [
          {
            "Ref": "DBSubnet1"
          },
          {
            "Ref": "DBSubnet2"
          },
          {
            "Ref": "DBSubnet3"
          },
          {
            "Ref": "DBSubnet4"
          }
        ]
      }
    },
    "RedshiftSubnetGroup": {
      "Type": "AWS::Redshift::ClusterSubnetGroup",
      "Properties": {
        "Description": {
          "Ref": "AWS::StackName"
        },
        "SubnetIds": [
          {
            "Ref": "DBSubnet1"
          },
          {
            "Ref": "DBSubnet2"
          },
          {
            "Ref": "DBSubnet3"
          },
          {
            "Ref": "DBSubnet4"
          }
        ]
      }
    },
    "ElastiCacheSubnetGroup": {
      "Type": "AWS::ElastiCache::SubnetGroup",
      "Properties": {
        "CacheSubnetGroupName": {
          "Ref": "AWS::StackName"
        },
        "Description": {
          "Ref": "AWS::StackName"
        },
        "SubnetIds": [
          {
            "Ref": "DBSubnet1"
          },
          {
            "Ref": "DBSubnet2"
          },
          {
            "Ref": "DBSubnet3"
          },
          {
            "Ref": "DBSubnet4"
          }
        ]
      }
    },
    "DAXSubnetGroup": {
      "Type": "AWS::DAX::SubnetGroup",
      "Properties": {
        "SubnetGroupName": {
          "Ref": "AWS::StackName"
        },
        "Description": {
          "Ref": "AWS::StackName"
        },
        "SubnetIds": [
          {
            "Ref": "DBSubnet1"
          },
          {
            "Ref": "DBSubnet2"
          },
          {
            "Ref": "DBSubnet3"
          },
          {
            "Ref": "DBSubnet4"
          }
        ]
      }
    },
    "SingupLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/picture-service-dev-singup"
      }
    },
    "LoginLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/picture-service-dev-login"
      }
    },
    "PrivateAPILogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/picture-service-dev-privateAPI"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "picture-service",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/picture-service-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/picture-service-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cognito-idp:AdminInitiateAuth",
                    "cognito-idp:AdminCreateUser",
                    "cognito-idp:AdminSetUserPassword"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "picture-service",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "EnterpriseLogAccessIamRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::802587217904:root"
              },
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "sts:ExternalId": "ServerlessEnterprise-a501c56d-3d0c-41ce-aa8f-5b03396fc783"
                }
              }
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "LogFilterAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:FilterLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "SingupLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "LoginLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "PrivateAPILogGroup",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "SingupLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/picture-service/dev/1643380694288-2022-01-28T14:38:14.288Z/singup.zip"
        },
        "Handler": "s_singup.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "picture-service-dev-singup",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "user_pool_id": {
              "Ref": "UserPool"
            },
            "client_id": {
              "Ref": "UserClient"
            },
            "NODE_ENV": "dev",
            "DB_NAME": "picture-database",
            "DB_USER": "admin",
            "DB_PASSWORD": "password",
            "DB_HOST": "picture-data.cxil51qacjny.us-west-2.rds.amazonaws.com",
            "DB_PORT": "3306"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Ref": "AppSecurityGroup"
            }
          ],
          "SubnetIds": [
            {
              "Ref": "AppSubnet1"
            },
            {
              "Ref": "AppSubnet2"
            },
            {
              "Ref": "AppSubnet3"
            },
            {
              "Ref": "AppSubnet4"
            }
          ]
        }
      },
      "DependsOn": [
        "SingupLogGroup"
      ]
    },
    "LoginLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/picture-service/dev/1643380694288-2022-01-28T14:38:14.288Z/login.zip"
        },
        "Handler": "s_login.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "picture-service-dev-login",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "user_pool_id": {
              "Ref": "UserPool"
            },
            "client_id": {
              "Ref": "UserClient"
            },
            "NODE_ENV": "dev",
            "DB_NAME": "picture-database",
            "DB_USER": "admin",
            "DB_PASSWORD": "password",
            "DB_HOST": "picture-data.cxil51qacjny.us-west-2.rds.amazonaws.com",
            "DB_PORT": "3306"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Ref": "AppSecurityGroup"
            }
          ],
          "SubnetIds": [
            {
              "Ref": "AppSubnet1"
            },
            {
              "Ref": "AppSubnet2"
            },
            {
              "Ref": "AppSubnet3"
            },
            {
              "Ref": "AppSubnet4"
            }
          ]
        }
      },
      "DependsOn": [
        "LoginLogGroup"
      ]
    },
    "PrivateAPILambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/picture-service/dev/1643380694288-2022-01-28T14:38:14.288Z/privateAPI.zip"
        },
        "Handler": "s_privateAPI.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "picture-service-dev-privateAPI",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "user_pool_id": {
              "Ref": "UserPool"
            },
            "client_id": {
              "Ref": "UserClient"
            },
            "NODE_ENV": "dev",
            "DB_NAME": "picture-database",
            "DB_USER": "admin",
            "DB_PASSWORD": "password",
            "DB_HOST": "picture-data.cxil51qacjny.us-west-2.rds.amazonaws.com",
            "DB_PORT": "3306"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Ref": "AppSecurityGroup"
            }
          ],
          "SubnetIds": [
            {
              "Ref": "AppSubnet1"
            },
            {
              "Ref": "AppSubnet2"
            },
            {
              "Ref": "AppSubnet3"
            },
            {
              "Ref": "AppSubnet4"
            }
          ]
        }
      },
      "DependsOn": [
        "PrivateAPILogGroup"
      ]
    },
    "PrivateAPILambdaVersionlt1kiwqOKkhEHeMUHYUWfPZH7sRrgZjE2yfWuUB18": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PrivateAPILambdaFunction"
        },
        "CodeSha256": "tTwJrSazsA7pWZvn1YDj7x1fv2Z8IeWzKTl1K16h+t4="
      }
    },
    "SingupLambdaVersion2Lym4RtY6Eq0cuqleSPIRFD6Mbtyntt4lMLqiDJvZc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SingupLambdaFunction"
        },
        "CodeSha256": "+BrmDaP4jdQuBgqBOoDtnck6aXiyc/i7HaPdspNNaJM="
      }
    },
    "LoginLambdaVersionoMj2DQEG4Y6NkDAhlF1rn5SeIOqA9C8reCuoxL14T88": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "LoginLambdaFunction"
        },
        "CodeSha256": "MvGGLBWl0vsToRc4xckGbiXMjpSMPEXPMcvjpnjBhIQ="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-picture-service",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceSignup": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "signup",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceLogin": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "login",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourcePrivate": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "private",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodSignupOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceSignup"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodLoginOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceLogin"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodPrivateOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourcePrivate"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodSignupPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSignup"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SingupLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SingupLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodLoginPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceLogin"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LoginLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "LoginLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodPrivatePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePrivate"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PrivateAPILambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "PrivateAPILambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1643380644134": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodSignupOptions",
        "ApiGatewayMethodLoginOptions",
        "ApiGatewayMethodPrivateOptions",
        "ApiGatewayMethodSignupPost",
        "ApiGatewayMethodLoginPost",
        "ApiGatewayMethodPrivatePost"
      ]
    },
    "SingupLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SingupLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "LoginLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "LoginLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "PrivateAPILambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PrivateAPILambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ApiGatewayLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/api-gateway/picture-service-dev"
      }
    },
    "CustomApiGatewayAccountCloudWatchRole": {
      "Type": "Custom::ApiGatewayAccountRole",
      "Version": 1,
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomDashresourceDashapigwDashcwDashroleLambdaFunction",
            "Arn"
          ]
        }
      }
    },
    "IamRoleCustomResourcesLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "dev",
                  "picture-service",
                  "custom-resources-lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn",
                        {
                          "Ref": "AWS::Partition"
                        },
                        "iam:",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "role/*"
                      ]
                    ]
                  },
                  "Action": [
                    "iam:AttachRolePolicy",
                    "iam:CreateRole",
                    "iam:ListAttachedRolePolicies",
                    "iam:PassRole"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn",
                        {
                          "Ref": "AWS::Partition"
                        },
                        "apigateway:*::/account"
                      ]
                    ]
                  },
                  "Action": [
                    "apigateway:GET",
                    "apigateway:PATCH"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "CustomDashresourceDashapigwDashcwDashroleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/picture-service/dev/1643380694288-2022-01-28T14:38:14.288Z/custom-resources.zip"
        },
        "FunctionName": "picture-service-dev-custom-resource-apigw-cw-role",
        "Handler": "apiGatewayCloudWatchRole/handler.handler",
        "MemorySize": 1024,
        "Runtime": "nodejs12.x",
        "Timeout": 180,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleCustomResourcesLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "IamRoleCustomResourcesLambdaExecution"
      ]
    },
    "UserPool": {
      "Type": "AWS::Cognito::UserPool",
      "Properties": {
        "UserPoolName": "serverless-auth-pool",
        "Schema": [
          {
            "Name": "email",
            "Required": true,
            "Mutable": true
          }
        ],
        "Policies": {
          "PasswordPolicy": {
            "MinimumLength": 6
          }
        },
        "AutoVerifiedAttributes": [
          "email"
        ]
      }
    },
    "UserClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "ClientName": "user-pool-ui",
        "GenerateSecret": false,
        "UserPoolId": {
          "Ref": "UserPool"
        },
        "AccessTokenValidity": 5,
        "IdTokenValidity": 5,
        "ExplicitAuthFlows": [
          "ADMIN_NO_SRP_AUTH"
        ]
      }
    },
    "CWLSubFilterSingupLogGroupUsWest2": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "Properties": {
        "DestinationArn": "arn:aws:logs:us-west-2:802587217904:destination:a501c56d-3d0c-41ce-aa8f-5b03396fc783#ytqn9BXJ0rxsymPtM0#picture-service#dev",
        "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
        "LogGroupName": {
          "Ref": "SingupLogGroup"
        }
      }
    },
    "CWLSubFilterLoginLogGroupUsWest2": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "Properties": {
        "DestinationArn": "arn:aws:logs:us-west-2:802587217904:destination:a501c56d-3d0c-41ce-aa8f-5b03396fc783#ytqn9BXJ0rxsymPtM0#picture-service#dev",
        "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
        "LogGroupName": {
          "Ref": "LoginLogGroup"
        }
      }
    },
    "CWLSubFilterPrivateAPILogGroupUsWest2": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "Properties": {
        "DestinationArn": "arn:aws:logs:us-west-2:802587217904:destination:a501c56d-3d0c-41ce-aa8f-5b03396fc783#ytqn9BXJ0rxsymPtM0#picture-service#dev",
        "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
        "LogGroupName": {
          "Ref": "PrivateAPILogGroup"
        }
      }
    },
    "CWLSubFilterApiGatewayLogGroupUsWest2": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "Properties": {
        "DestinationArn": "arn:aws:logs:us-west-2:802587217904:destination:a501c56d-3d0c-41ce-aa8f-5b03396fc783#ytqn9BXJ0rxsymPtM0#picture-service#dev",
        "FilterPattern": "\"SLS_ACCESS_LOG\"",
        "LogGroupName": {
          "Ref": "ApiGatewayLogGroup"
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-picture-service-dev-ServerlessDeploymentBucketName"
      }
    },
    "VPC": {
      "Description": "VPC logical resource ID",
      "Value": {
        "Ref": "VPC"
      },
      "Export": {
        "Name": "sls-picture-service-dev-VPC"
      }
    },
    "LambdaExecutionSecurityGroupId": {
      "Description": "DEPRECATED - Please use AppSecurityGroupId instead",
      "Value": {
        "Ref": "AppSecurityGroup"
      },
      "Export": {
        "Name": "sls-picture-service-dev-LambdaExecutionSecurityGroupId"
      }
    },
    "AppSecurityGroupId": {
      "Description": "Security Group ID that the applications use when executing within the VPC",
      "Value": {
        "Ref": "AppSecurityGroup"
      },
      "Export": {
        "Name": "sls-picture-service-dev-AppSecurityGroupId"
      }
    },
    "RDSSubnetGroup": {
      "Description": "Subnet Group for rds",
      "Value": {
        "Ref": "RDSSubnetGroup"
      },
      "Export": {
        "Name": "sls-picture-service-dev-RDSSubnetGroup"
      }
    },
    "RedshiftSubnetGroup": {
      "Description": "Subnet Group for redshift",
      "Value": {
        "Ref": "RedshiftSubnetGroup"
      },
      "Export": {
        "Name": "sls-picture-service-dev-RedshiftSubnetGroup"
      }
    },
    "ElastiCacheSubnetGroup": {
      "Description": "Subnet Group for elasticache",
      "Value": {
        "Ref": "ElastiCacheSubnetGroup"
      },
      "Export": {
        "Name": "sls-picture-service-dev-ElastiCacheSubnetGroup"
      }
    },
    "DAXSubnetGroup": {
      "Description": "Subnet Group for dax",
      "Value": {
        "Ref": "DAXSubnetGroup"
      },
      "Export": {
        "Name": "sls-picture-service-dev-DAXSubnetGroup"
      }
    },
    "AppSubnet1": {
      "Value": {
        "Ref": "AppSubnet1"
      },
      "Export": {
        "Name": "sls-picture-service-dev-AppSubnet1"
      }
    },
    "AppSubnet2": {
      "Value": {
        "Ref": "AppSubnet2"
      },
      "Export": {
        "Name": "sls-picture-service-dev-AppSubnet2"
      }
    },
    "AppSubnet3": {
      "Value": {
        "Ref": "AppSubnet3"
      },
      "Export": {
        "Name": "sls-picture-service-dev-AppSubnet3"
      }
    },
    "AppSubnet4": {
      "Value": {
        "Ref": "AppSubnet4"
      },
      "Export": {
        "Name": "sls-picture-service-dev-AppSubnet4"
      }
    },
    "EnterpriseLogAccessIamRole": {
      "Value": {
        "Fn::GetAtt": [
          "EnterpriseLogAccessIamRole",
          "Arn"
        ]
      },
      "Export": {
        "Name": "sls-picture-service-dev-EnterpriseLogAccessIamRole"
      }
    },
    "PrivateAPILambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PrivateAPILambdaVersionlt1kiwqOKkhEHeMUHYUWfPZH7sRrgZjE2yfWuUB18"
      },
      "Export": {
        "Name": "sls-picture-service-dev-PrivateAPILambdaFunctionQualifiedArn"
      }
    },
    "SingupLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SingupLambdaVersion2Lym4RtY6Eq0cuqleSPIRFD6Mbtyntt4lMLqiDJvZc"
      },
      "Export": {
        "Name": "sls-picture-service-dev-SingupLambdaFunctionQualifiedArn"
      }
    },
    "LoginLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "LoginLambdaVersionoMj2DQEG4Y6NkDAhlF1rn5SeIOqA9C8reCuoxL14T88"
      },
      "Export": {
        "Name": "sls-picture-service-dev-LoginLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-picture-service-dev-ServiceEndpoint"
      }
    }
  }
}